import java.util.*;/** * Created by tin on 5/28/16. */public class BreathFirstSearch {    public static void main(String[] args) {        Scanner scanner = new Scanner(System.in);        final int testCases = scanner.nextInt();        for (int i = 0; i < testCases; i++) {            final int nodes = scanner.nextInt();            final int numEdges = scanner.nextInt();            Map<Integer, List<Integer>> edges = new HashMap<>();            for (int j = 0; j < numEdges; j++) {                final int start = scanner.nextInt();                final int stop = scanner.nextInt();                addToMap(edges, start, stop);                addToMap(edges, stop, start);            }            final int startNode = scanner.nextInt();            List<Integer> distances = resolve(startNode, nodes, edges);            for (int distance : distances) {                System.out.print(distance + " ");            }            System.out.println();        }    }    private static List<Integer> resolve(int startNode, int nodes, Map<Integer, List<Integer>> edges) {        List<Integer> distances = new ArrayList<>();        for (int i = 1; i <= nodes; i++) {            if (i == startNode)                continue;//             getShorted path from startNode to this node nodes.get(i)            final int distance = getDistance(startNode, i, edges, new ArrayList<>());            distances.add(distance);        }        return distances;    }    private static void addToMap(Map<Integer, List<Integer>> edges, int start, int stop) {        if (edges.containsKey(start)) {            edges.get(start).add(stop);        } else {            ArrayList<Integer> value = new ArrayList<>();            value.add(stop);            edges.put(start, value);        }    }    static Queue<Integer> integers = new LinkedList<>();    private static int getDistance(int startNode, int end, final Map<Integer, List<Integer>> edges, List<Integer> visited) {        visited.add(startNode);        for (int i = 0; i < edges.get(startNode).size(); i++) {            final int adjacent = edges.get(startNode).get(i);            if (adjacent == end) {                return 6;            }            integers.offer(adjacent);        }        for (int i = 0; i < integers.size(); i++) {            final int deque = integers.peek();            final int distance = getDistance(deque, end, edges, visited);        }        return -1;    }}